; This example is taken from "mimasm" (with small changes)
;   https://github.com/cbdevnet/mima/blob/master/mimasm/demo-sort.txt
;
; Copyright (c) 2012, FJS/cbdev
; All rights reserved.
;
;Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

;Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
;Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
;
;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*				=		0
ARR1: 			DS		5
ARR2: 			DS		3
ARR3: 			DS 		1
ARR4: 			DS 		9

*				=		0x40
ARRLEN: 		DS 		3

*				=		0x80
POS_ONE: 		DS		 1
NEG_ONE: 		DS		 -1
TEMP:			DS 0
CURELEM: 		DS 0
CURPOS: 		DS 0
	
*				=		0x100
START:			LDV 64	;initialize current checked element to array length
				STV CURELEM

OUTERLOOP:		LDV CURELEM		;prepare element iteration
				ADD NEG_ONE	
				STV CURPOS		;only need to compare from current element downwards
				JMN EXIT		;if comparison index would be negative, halt

INNERLOOP:		LDIV CURPOS		;load current position value
				NOT
				ADD POS_ONE		;negate in two's complement
				STV TEMP		;store
				LDIV CURELEM	;load current elements value
				ADD TEMP		;subtract position value
				JMN SWAP		;swap if arr[curPos]>arr[curElem]
				JMP NEXTPOS		;else, continue

SWAP:			LDIV CURPOS		;load position value
				STV TEMP		;store
				LDIV CURELEM	;load element value
				STIV CURPOS		;store to position
				LDV TEMP		;load saved position value
				STIV CURELEM	;store to element

NEXTPOS:		LDV CURPOS		;to check next position
				ADD NEG_ONE		;decrement position
				JMN NEXTELEM	;if at end of array, continue in outer loop
				STV CURPOS		;store decremented position
				JMP INNERLOOP	;check next position

NEXTELEM:		LDV CURELEM		;to check next element
				ADD NEG_ONE		;decrement index
				JMN EXIT		;if that would be <0, exit
				STV CURELEM		;store result
				JMP OUTERLOOP	;work

EXIT:			HALT